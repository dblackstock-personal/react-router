{"version":3,"sources":["components/Nav.js","components/Home.js","components/About.js","App.js","serviceWorker.js","index.js"],"names":["Nav","props","className","to","href","basketProp","Home","price","onClick","toBasket","About","App","state","basket","basketItems","addToBasket","item","setState","console","log","this","path","component","render","React","Component","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sSAsBeA,G,OAjBH,SAACC,GACT,OACI,6BACI,wBAAIC,UAAU,SAAd,gBACA,4BACI,4BACA,kBAAC,IAAD,CAAMC,GAAG,IAAIC,KAAK,KAAlB,SAEA,4BACA,kBAAC,IAAD,CAAMD,GAAG,SAASC,KAAK,UAAvB,UAEA,uCAAaH,EAAMI,gBCHpBC,EAXF,SAACL,GACV,OACI,6BACI,qDACA,4CACA,8DAAiCA,EAAMM,OACvC,4BAAQL,UAAU,kBAAkBM,QAASP,EAAMQ,UAAnD,0BCGGC,EATD,WACV,OACI,6BACI,sDACA,2C,QC+BGC,E,2MA7BbC,MAAQ,CACNC,OAAQ,EACRC,YAAa,I,EAGfC,YAAc,SAACC,GACb,EAAKC,SAAS,CACZJ,OAAQ,EAAKD,MAAMC,OAAS,EAC5BC,YAAY,GAAD,mBAAM,EAAKF,MAAME,aAAjB,CAA8BE,MAE3CE,QAAQC,IAAI,EAAKP,MAAME,c,wEAGf,IAAD,OAEP,OACE,kBAAC,IAAD,KACE,6BACE,kBAAC,EAAD,CAAKT,WAAYe,KAAKR,MAAMC,SAC5B,kBAAC,IAAD,KACA,kBAAC,IAAD,CAAOQ,KAAK,SAASC,UAAWZ,IAChC,kBAAC,IAAD,CAAOW,KAAK,IAAIE,OAAQ,kBAAM,kBAAC,EAAD,CAAMhB,MAAO,IAAKE,SAAU,EAAKM,YAAaC,KAAM,oB,GAtB1EQ,IAAMC,WCKJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASR,OAAO,kBAAC,EAAD,MAASS,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.034f0b85.chunk.js","sourcesContent":["import React from 'react'\nimport '../App.css';\nimport { BrowserRouter, Route, Link } from 'react-router-dom';\nimport { tsPropertySignature } from '@babel/types';\n\nconst Nav = (props) => {\n    return (\n        <nav>\n            <h2 className='title'>Black Friday</h2>\n            <ul>\n                <li>\n                <Link to=\"/\" href=\"/\">Home</Link>\n                </li>\n                <li>\n                <Link to=\"/about\" href=\"/about\">About</Link>\n                </li>\n                <li>Basket: {props.basketProp}</li>\n            </ul>\n        </nav>\n    )\n}\n\nexport default Nav;","import React from 'react'\n\nconst Home = (props) => {\n    return (\n        <div>\n            <h1>This is the Home Page</h1>\n            <h3>Welcome Home</h3>\n            <p>Lorem ipsum dolor sit amet: Â£{props.price}</p>\n            <button className=\"purchase-button\" onClick={props.toBasket}>Add it to the basket</button>\n        </div>\n    )\n}\n\nexport default Home;\n","import React from 'react'\n\nconst About = () => {\n    return (\n        <div>\n            <h1>This is the About Page</h1>\n            <h3>About Me!</h3>\n        </div>\n    )\n}\n\nexport default About;","import React from 'react';\nimport Nav from './components/Nav';\nimport Home from './components/Home';\nimport About from './components/About';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport './App.css';\n\nclass App extends React.Component {\n  state = {\n    basket: 0,\n    basketItems: []\n  }\n\n  addToBasket = (item) => {\n    this.setState({\n      basket: this.state.basket + 1,\n      basketItems: [...this.state.basketItems, item]\n    })\n    console.log(this.state.basketItems);\n  }\n\n  render() {\n\n    return (\n      <BrowserRouter>\n        <div>\n          <Nav basketProp={this.state.basket}/>\n          <Switch>\n          <Route path=\"/about\" component={About} />\n          <Route path=\"/\" render={() => <Home price={300} toBasket={this.addToBasket} item={\"apple\"} />} />\n          </Switch>\n        </div>\n      </BrowserRouter>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}